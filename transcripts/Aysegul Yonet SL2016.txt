   Aysegul Yonet.
   StrangeLoop 2016
   Live captioning by Norma Miller @whitecoatcapxg
   
   >> Hi everyone. My name is Aysegul, this is my first time at Strangeloop. It's very exciting, and so I work at autodesk as a senior software engineer, and I am a Google expert in Angular, and I'm here to tell you a little bit of data visualization, a little bit of the tools that we are using.
   Before I start talking about the tools, I wanted to tell you a little bit about the other organizations that I work with, because Alex Miller strongly encouraged me to do that and that doesn't happen very often, so thank you for doing that. I've been -- I hosted woman who code meetups in San Francisco for Javascript for two years and I've been teaching for Girl Develop It it and preparing curriculum and it's open source and anyone can take it and use it as you like. Teach with Black Girls Code, they have amazing hackathon and also the last mile. Which is the program in prison, in San Quentin prison, and I am one of the mentors. It's an interesting program. If you are interested, there's a ten-minute documentary about it, too, and it's been an amazing experience because it's a totally different experience to be able to code in a place that there's no internet. And lastly, I've been the CTO of AnnieCannons for more than a year last year. So at AnnieCannons, we teach human trafficking survivors how to code. There's been a lot of challenges but we have great students. So that's about the organizations that I work with, but if you have any questions later on, find me, I love to talk about it.
   So why do I want to talk to you about storytelling with your data? Because that's the problem that I've been trying to solve at work recently. I mean lately. So if you're familiar, we do a lot of 3D programs and one of the products that I'm working on is the 3D viewer. It's such an amazing tool, I was so inspired when I first saw t you can move around 3D things, you can pull them apart, and you have a walking ability, you can just walk in it. This is such an awesome tool and it really encourages people to work together, being able to you know, work from a distance, especially like the architects and manufacturing designers, but soon enough, we realized that just being able to have access to the data is not the whole thing.
   We are able to just display any kind of model and most of the models are so much more complex than the Golden Gate Bridge, and when you see it, most of the time people are very confused, they don't know what to do, you build all these amazing tools, but then it's really hard to use. So we have the viewer basically not open source, but it's an open API so anyone can take it and put it on their website and they did, they did really cool stuff with it. So this is one of them, they just took it. It's a building, and they just gave so much more information than we did. But it has to load. So what this is doing is that the green things that you see there are the sensors, so they're able to measure all the inefficiencies of the heat or maybe gas, I don't know what they're measuring exactly. And they can monitor it at all times. And another really cool one that I found totally not our product, someone in the open source did it, is actually made an animation with it. So we've been there, right? We've read the documentation for Ikea, everyone did that, and then it's really confusing, you don't know and the pictures never look like what it is, but this is a great use of the 3D environment, I think and it's really telling us where to look for, I mean if you just sent me this model, I would never know where to find those little stuff. Yeah, I think I can assemble that.
   So these are just things that we've been working on and struggling with a lot, and I think this is a problem with everybody. We have a lot of data we don't know what to do with, there's just like overexposure to some data, but it's really hard to understand and just giving access to someone to the data is not the whole picture.
   So these are the examples on the slides, and if you want to take a look, and also the forge.autodesk.com is the platform you can go in and check out the APIs yourself. And for tools we use Three.js obviously, AngularJS, D3 and RX.js and many more, actually. Has anyone used Angular 2.0 yet?
   Yay! You're teaching it. I know.
   [laughter]
   So if you don't know, it came out, it's out of beta now. It came out Wednesday. And I'm super-excited to be the first one to talk about it, hopefully. So you can check out the new version in the new website here. And it's a really amazing tool. It's been two years and thousands of commits, only this is just Angular repo. There's so much more. And everything is organized into smaller modules now, and it's so much easier to wrap your head around the different parts of your application, I think. And the speed and performance are improved vastly. Now you don't have to ship the compiler to your clients anymore, you can just do the compiling and do the things that Angular needs to do in the back end and then send a compiled version of it, which is the 60% of the Angular code. And there's a lot of really cool toolings to help us to use it. Angular CLI is one of them. It's kind of magical. Rx Jk, I think it was built by Microsoft at first, but now people at Netflix are using it. These are all open source. I was so sad when I first heard about it, why didn't I know about it? Anyone used it before? Yeah, very few. It's really, really cool. But it's also, a little mind-blowing at first. So what it is is that instead of promises, it allows us to work with the observables in a very efficient way.
   And we have the code analyzer and TypeScript and many more tools, and Material Design is in alpha but it's looking really good so far. The other tool that recently changes D3, so it went through a huge change, as well, how many people used D3? A few. It's an amazing library, truly amazing, it stands for data-driven documents. It allows you to work with your data and make DOM manipulations very easily, but it's also a very flexible tool, which means that it's complicated to work with sometimes.
   So it has a new version, as well, version 4. After a whole year Microsoft said it's ready. Now it's also organized into smaller modules, so people can just take parts of it and don't have to have all of the library if you are not using everything, so which makes it even better to mix and match different libraries because you don't have to worry that you're using this or that.
   It has a lot of cool functionality and a very, very long change log. I strongly recommend reading it, though.
   And it has an amazing open source community, on the website you can see all of the examples, and take it, and people will constantly post it. And there was a conference -- there's a conference coming up for D3. D3 conf and they don't allow you to apply for the conference if you don't submit a code there. So they encourage sharing.
   So all of these things are changing very rapidly, so how do we migrate from one to the other and there's just too many things to migrate from and we wish it was this easy, you just change the scripts and then everything works, but obviously it's not the case.
   But the good news is that there are lots of helpers. D3 is the -- the changes are not that difficult to handle, let's say. You need to change the -- some of the functionality, but the way you write your code is basically the same.
   That is not the case for Angular. It is very different, but what they have been trying to do is trying to change the style of it a little bit to make it easier for people to make the switch and they're also building an upgrade tool.
   So those of you who haven't seen it for D3, so it allows us to make some selections on the DOM, and it tags some data to it, and now you can do a lot of things like whatever you want with that data point at the DOM, using that data.
   So in this case, we're selecting some paragraphs and appending some array, and we are using that arrays elements to create our HTML.
   For those of you who work with it, I actually haven't met anyone who really worked with D3 and hasn't had a moment of saying, like, what just happened?
   And it usually is about our selections, and there's a lot of emphasis on it, because there's this really kind of confusing function called enter and append and then exit and remove, and every time you enter and append, you are changing your selection and you you are working on a totally different selection.
   It was -- that was the case, but now you are actually getting a copy of it, I think.
   So as I mentioned, the way we work hasn't changed that much. So we still have to -- any time you have new data points, we have to make a selection, append the data to it and then append all of our DOM elements with those data points to our state and when we need to remove it, we have to do exit and remove, but there is an addition to it, so which is the merge function, which we did not have before, which allows us to merge the ones that has to leave and the ones that are coming in, which is really useful, I mean if you are doing realtime data or any kind of data that is important that you show the difference, it's a really cool thing to have.
   So I don't know if you can see it, but so I have the basic, you know, the HTML added with my data, but I have two different data points. Data 1 and data 2 arrays, so I'm rendering the first one and then rendering the second one. I don't know if you can see it, but now the ones that are leaving has a different color than the ones that has to stay, which has new data points attached to it and we are merging them together to be able to see it at the same time.
   D3 comes with really cool transitions, and it's even easier now to work with them. Basically it's defined for us, and we have an ease function and there's a lot of ways of doing different easing which is really nice.
   If you are -- you want to use a few things from D3 but you don't want to get into all of the svgs and deep-dive into data visualization, one thing that you can definitely use is scales that you can not really find in any other library. What scales does is it takes your data point and then scales it to the environment that you are trying to display. Basically to your screen. So you can -- so usually your screen is not this big but it is taking everything as a range, all of your data. Well, this is not the data, I'm sorry. The range is your display size, and then you also have to give it the domain, which is the range of your data points, and then it gives you back a function that calculates any time you give a data that calculates the matching point on your screen.
   OK. This is not super-useful for printing, but it's very useful for axis and other stuff and Axis is a little bit more complicated before. Now it's so much easier with D3 version 4.
   So we can just divide our process into building our SVG, populating our data and drawing our axis over and over again and we do this inside the render function most of the time, because most of the time you need to change your data points and redo the rendering. Also you can take advantage of the animation request frame.
   So here's an example. You can change your data, and the scales are changing, and axes are being re-rendered each time we click.
   So why are we using Angular and D3 together? Has anyone used Angular and D3 together? We should be friends.
   I really like it. I think there are a few talks here, too, about React and D3. It is a really great idea to put D3 functions into a component, because D3 is not really easy to do. You have to basically define everything from your skills where everything has to look, so it's not like a premade library, I mean, a plug and play thing, so you have to create the same things over and over, so it's a really great idea to be able to put them in inside different components with Angular or React or anything else so you just reuse them. You could just pass the data, it could be a bar chart or it could be scatter plot and you don't have to write it over and over. So that's why I really like using Angular 2. But Angular 1 was also doing it but it was a little more difficult, I realize.
   We also have Ng modules that allows us to put in the components and all of the functionality that goes with it into single modules. I was really excited about it. There was some, you know, people were not very happy when they said we will have modules for some reason. There was a huge discussion about it, but I think it really makes it easy to, you know, move code, share code and basically make your own libraries.
   And TypeScript has been very useful, because D3 is very picky, maybe, and when you're drawing your line with a lot of data points, all of your data points has to be number or you know, whatever you need it to be, but if any data point is missing, if you have one issue with just one data point, your whole graph won't render, and TypeScript is really cool, because a chance to check if the -- if what you're giving to your graph is the right thing.
   So to get started with Angular 2, Angular-cli is a really great tool. There are lots of options out there, there's a starter project, but this is really, really awesome, so you just have to install it globally and then ng new my app, create a new app, it will install everything for you and build it.
   So this is the this is the basic structure of the app. We have a distribution folder that's a cli created some dev assets for us. You can build for production, as well, everything is ready for, you and we have everything loaded for us, and Angular-cli has its own JSON file that you could make some adjustments and make it your own basically. Once you do that, on your app, you have this one main module. This is where your application starts. So it's a very tree-structured thing. You have only one component that is your root component, and once you initiate that, it knows what else to render. It knows its child components and then the Childs components know it's child components. So I think it's a really cool system. It also allows you to do a lot of lazy loading really easily. So you can define totally different route, totally different part of your app separately and then include it. And it will make it easy to work on.
   So here is our app module. Whenever I create a new component, or a service automatically cli is adding it to my app component. This might not be the behavior that you want sometimes, but it's very useful for now.
   So we have the six import modules. These are the main Angular modules at the beginning and then I have some material and I have my own components.
   So if we look at the module structure, we have some declarations. These are the components that we are going to be using. We have some imports, all of the modules that this app will need, and we have some providers which are the services which will be the common functionality throughout our app. So any kind of service that you insert on the root level will be available to you in any part of your application.
   And then, our main component is the app components, and I do have things going on in here.
   So one thing that I want to show you was the animations. Animation is a very new tool in Angular, and they have been making it -- working on making it very flexible. It looks like a live code. This is my animation on the right side that's being defined. So I have a trigger, so I predefined it so I can take this trigger into any kind of component, and reuse it. That's why I put it inside a separate folder. And you define the basic transitions. Let's say I actually wanted to make -- always wanted to make a slide animation, so I think I'm going to do that with this. We have a state that we are defining so any time the in states happen with the components, these styles will happen. We have some transitions and we have some key animation capabilities, as well. So if -- I mean you -- all you are going to do is a bar chart, I think D3 is overkill except the stales, if it's a horizontal bar chart. That makes it a little easy, but if you have this capability in your application already, some animations and then you can basically use divs to create the same. So inside my app component, I have some data service that is getting fetching the data for me, and it's using observables for HTTP, so we defined observables and where we are going to make the call inside my service, but before I subscribe it, it's not being called anywhere. So that's something to keep in mind. And the cool thing about observables is also that if I -- I'm not in this component anymore, it's not in my view and if there is some calls that I'm still waiting for to happen, they will all die down, be unsubscribed.
   So I'm getting this data and then I am giving that data to my child components, so basically app component is one of my main components, so I'm trying to keep all of my data inside kind of like the smart components, like the top-level components, so the child components don't have to know anything about the structure of my app and they can take any kind of data from any kind of app, any kind of backend and they can be reused. So this was a huge problem that we faced in our previous product. There was a lot of people working on it and then we were trying to reuse some parts of it, and it was a true mess, because we were constantly changing the data to match the structure of the components, and that's definitely not the way to do it.
   Instead, I'm keeping the data in only one place, which is kind of the parent and I'm passing the data in as an attribute. So these square brackets are the attributes binding, I have the app animations component that I newly created and all it needs is the data that I'm giving it to it and then it will know how to render it.
   As you look at the animation component, there's not much going on, but also there's no data related stuff, too. It's really doesn't know which application it's in, basically.
   So the animation one is defining these animations, basically and any time I add a new one, it adds a new one. Not the 3D animation, but it works. The way I defined it is I put all of my animation definitions inside another animations function so I can share it with log components, and if you look at our component definition, I'm importing those animations, and the line that starts on 9 add component is the component annotation which defines the function, the class that comes right after it, as a component, and the selector is the app animation, so any time I want to use this, I use that HTML tag. We can have template URL, style URLs or just put them in there, as well and the other thing we can put is the animations we're going to be using so I'm going to use fly in and out and datum state animations.
   This looks a little bit, um, confusing, but also because I tried to put multiple animations in, it's -- that's also why.
   So I'm defining a fly in start and fly out done event, so every time we see a parentheses, that means an event being omitted, so we have a way of knowing animation is done, and before it starts, so I'm just logging that, I'm not doing anything about it, but the fly in and out animation is being defined as an attribute. So any time we have the square brackets that's an attribute. And when we click, we're just toggling.
   So here is a simple bar graph component that I prepared. Basically I have the functions that I promised to you the setup build the SVG and populate with the data. So I keep running these functions over and over whenever a change happens. Angular also gives us these change detection, any time anything changes on your components, which we are expecting the data to change, the changes will be reflected and we will re-render it.
   Here we are defining basic scaling of the x and scaling of the y and we have the axes we are defining, but if you notice, this setup function is not knowing anything about it, as well. So it doesn't have the data yet. The scales that we are defining is just telling how to render inside the DOM, but it doesn't know the data so far.
   When we built our SVG, we defined just the SVG, which is going to hold all of our visualization, and then we can append all of the axes and everything, and the populate function is the one that is letting know how to actually render with the data. So we are appending the data, selecting all of the bar elements and appending the data to it and enter and append is adding all of our data rectangles, and we are transitioning into it. And the -- that's why we have to also define the domains which is the input values of our scales inside our populate function.
   I'm also using some color scale, so this is the data for the Syrian refugees by division by the country, so I really wanted to show this data, because we keep talking about it, we keep hearing about it, but we don't realize what's going on and where these people are going and it was really surprising to see that most of them are in my home country basically and it's a small country, it's not that big. It's smaller than California. So I decided to look at the data in maybe a different way. So I added these categorizations. And it has the data by the population. And when we hear like people are going to another country, it doesn't really, you know, make sense to us, but this is the same scaling compared with the GDP of those countries, so as you can see, these countries over here, who happens the most refugees are not the richest ones in the world. And this is the area that they have. They're not big countries, either.
   And relative population, and GDP per capita.
   So I thought it was interesting to see, and one other thing that I wanted to demonstrate, although it's really hard to see, you have to scroll to see it, one of the questions I get all the time is how to display complex data. This is not very complex data, but people always try to do, very you know, beautiful, complex visualization and put everything in one place, and I really don't think it's a good idea. And perception is very important and it's really important to see the differences, and to have a different way of looking at the same thing.
   So I skipped some of my slides, so this is going through the generators that we have with the Angular-cli and how we can get started and the really cool thing is they're kind of opinionated so when you do ng builds or try to deploy, it tells you all of the things that you've done wrong and all the things that you don't need. It strips it out. It's really cool.
   And how am I doing with time?
   >> 3 minutes.
   >> Oh, all right, I'm going to skip through it, but there's a lot of resources on my slides if you'd like to save it somewhere so these are great Angular. Well, let's start with the D3 ones, this is my absolute favorite visualization so far. The person who did it is working on the second one for a long time now. So it's really, really cool. So D3 is super flexible. There's no other library that you could do things like that, I think. There are a lot of libraries. They're much easier to use, though, I mean if you don't need something very complex, you should not spend your time doing it. And for Angular resources, there is a Chrome debugger tools, it just released last week, but we already have a lot of tools, we have the CLI, we have the Chrome debugger and we have a lot of good courses and I think there was one of them in this conference, also, and Angular 2 has some open source charts, as well, they're really, really cool. If you are doing something simple, again, definitely use somebody else's and it's a great learning opportunity, I think. That's it for my talk. Thank you for your attention. Thank you for listening, and if you have any questions or want to just talk, please come say hi and I have some t-shirts. I heart 3D if anyone wants. Thank you.
   [applause]
