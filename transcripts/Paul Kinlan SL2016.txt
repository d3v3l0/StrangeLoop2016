   Paul Kinlan.
   StrangeLoop 2016
   Live captioning by Norma Miller @whitecoatcapxg.
   
    Alex:  Good morning, everyone! Welcome back for the second day of Strangeloop. Hope everybody is ready for some great stuff today.
   [applause]
    Did everybody like the t-shirts?
    AUDIENCE:  Yeah!
    Cool, I'm glad that worked out well. I did want to mention a few reminders. I don't have too many announcements. We don't have too many things out of the ordinary today. I do want to remind you there is a code of conduct and there is a duty officer in orange at the front desk. And we do have a photo policy so if you're taking pictures, please try to be respectful of what people have indicated as far as their photo preference.
    I did want to give -- I'll thank a lot of people later on today, but I did want to give a quick thanks to all the other organizers of Strangeloop, and so I want to thank and many of them are here, Ryan and Mario are down here in the front row, and I see Bridget in the middle here. I don't know if Crystal Martin is here? Crystal Martin put on the great Diversity In Tech event last night. And Nick is probably out organizing things somewhere.
   [applause]
    Nick was instrumental in running the party, so if you enjoyed the party at City Museum, that was his area. I know most people see me up here and see me being the visible person, but all these folks are working all year round with me, and are -- I couldn't do it without them, so it's a -- they're a fantastic part of the team, and owe all that to them. So.
   I think that's all that I have. So I'm very excited. I got in some talks early on with Google about maybe having somebody come and speak this morning and I'm really glad it worked out great and I want to introduce Paul Kinlan, who's a developer advocate at Google.
   [applause]
   
   
   PAUL KINLAN:  Thanks. Hello. Hello. Wow, it's -- I can't believe how big this venue is. It's crazy. I won't lie, I'm little bit nervous, but I got my Zelda shoes on. My Transformer underpants. You don't need to know about that.
   But I did want to start this off by doing -- has anyone -- obviously you've seen The Simpsons, but the flaming Homer where -- who is it Steve Tyler gets on the stage and shouts: Hello, St. Louis!
    I'm Paul Kinlan and I get to think a lot about the future of the mobile web. We've been working on a lot of technologies on the mobile web for a long time now and I'm in this lucky position where I can start to think about, you know, how all these pieces that are coming together come together and the good thing about thinking about the future of the mobile web is that every presentation that you do, you start off with the beginning. 
   There's a big bang moment where something before the time is like no one knows about the change and after the time, everything has changed. It's like zenith and epoch where everything after changes the world. We're going to talk about a couple of things that have changed but I think the thing that really changed the world was in 1822 when Charles Babbage built. 
   It's basically a two-ton machine which calculates logarithms and kind of other tabular data. Now, the great thing was, he designed it in 18 22. I say the great thing, it's a terrible thing. He designed it in 1822, but the engineering wasn't there to be able to build it at that time and he never got to build it. You had to build another two-ton machine that would be designed to solve the problems that you needed to solve. It was a one-function machine, essentially, but Charles Babbage knew that this was a limitation and a problem that you'd have to deal with and so he designed the analytical engine at the point, and the analytical engine was designed to basically take punch cards. It had lots of the common programming terms that we know today, and Ada Lovelace at the time was one of the world's first programmers, if not the first programmer and they basically decided to build a computer platform. Henry Babbage decided to build a prototype. It had rounding errors and off by errors. So it wasn't really the change we wanted to see in the world. But it actually got this idea for like a removable storage, like an SD card for the day. It was a write-only. You do it once and you push it through and it's red but you pushed it into the machine and in theory the calculation would happen once it ran the program, and at the end you would get the kind of the output, the thing that it created.
   Like the calculation that came out on like in a very like formal -- like a very kind of basic printer at the time. Now, if you jump forward another 100 years, we're still using punch cards, right, we have these rooms and these machines that the size of these massive rooms you would like design and create a program, take it to the machine, you could post it via like the postal service, you could put it in, someone would put it into the machine and it would go off and I say load balance, that's the wrong way of saying it, but it would time share essentially at that point. 
   The interesting thing for me at least anyway is these machines, they took away, I'm not saying they didn't take away a whole lot of jobs, but they optimized the process of very repetitive tasks. Very machine intensive and very interesting. But the point is it was the start of the computing generation at that point, and if you jump forward again another 20 years, we've got rid of the punch cards and we're at this point where we have these home computers, where you can take these discs, these cassettes, put them into the machine and start to play a game and yes, it took a long time for your applications and games to load up but the point is, you could go to a store, a shop, buy a game, take it home, load it up and play it. It was a very transformative point in the computing industry. 
   Then you move forward and this idea of floppy discs, but the idea behind this was you could take data, write to a disk, take it from school to your home, do your homework, save data, transfer programs and a whole bunch of other things again on the disk. I mean they were incredibly limited in the terms of like storage capacity, but the fact that you could transport all the data around, it was again, game-changing for a lot of people. Now, the problem was if anybody had to install Windows 95 or Office using 30 different discs you recognize how long it took to do anything with data on those machines.
 >>And CDs invented in the 1980s, didn't come into kind of general use until the mid-'90s. But they transformed the way we thought about computing, we could access movies. Like it was quite interesting when you think about the next generation after that, again it was like blue rays, 5 gig bites worth of data that you could store. 
   The problem was, at least in kind of like the more common era, the installation process and management of these things was incredibly cumbersome. It was really hard to actually -- you would get an application and you would install it and if you do it for your parents, your parents would ask you if the machine worked well, like that's one side of it but if you were in the enterprise, you'd have to have user acceptance testing, but you have to make sure it works in the environment it's going to run in. You jump forward a little bit we had this idea of the web. You enter a single URL and you get access to anything that could be accessed by the URL things like Hotmail, Google mail, and all those sorts of things, as well, when you think about things like the enterprise, that was massive, as well. They had no install, they incremental download as you navigated through the pages and in theory, they were sandboxed, so one application couldn't meddle with the data that was held in another application. So for me, at least  -- I just realize if I stand here, I can't -- it doesn't reach the thing. I'm stand here, that's fine.
   But the idea behind it was like, the web, we know -- and we knew this at the time, it was far less capable than the native platforms at the time, it didn't have access to the devices or anything on the actual user's machine, but the delivery model was massively better, it was a lot more efficient, a lot more optimized, you basically could build anything you want by giving it to a user and entering into a URL.
   I liked the term of the original part of the web where we don't have AJAX, so you got to the form you'd enter some data into a form, it would receive it, then we got this concept Ajax, you could create applications which felt as rich as a native application on the desktop, but you know, they were still delivered by mobile -- what -- delivered by mobile? Sorry. Just delivered by just entering it going into the URL.
   And that was quite interesting for me because you every single phase, some form of friction was removed. It could have been things like, it could have been the amount of data that you could transfer and put on so you could create different and more interesting applications or it could have been the method and the model of actually delivering the data to the user that had changed fundamentally.
   And specifically what I wanted to focus on today is this idea of distribution. Distribution was one of the hardest problems in the software and I'll talk about this a little bit later on. 
   The idea behind distribution, at one point you had to build the machine yourself and put the code on the machine yourself to get the application working to this point in the future where we just enter a URL in and we go and visit the page and start interacting with the content and I think that's incredibly powerful, right? That's a massive set of changes since the dawn of computing to the point where we are right now.
   But the problem for me is that all of these devices and all these kinds of sites and programs and apps have been designed in a desktop world. Every time that we kind of got like a general increase in screen size, everyone like, oh, my God, I have to redesign my site and it's terrible, and it is crazy. I kind of think of this as the Mobilithic Era, right? 
   Once mobile came along, like everything changed and before that, we were in this kind of nice happy world of desktop and it kind of at some point in the near future it's going to look probably quite arcane when we go back to how we used to build software for at least in the web.
   The thing I want to get across as well is the rate of change is increasing, as well. For a long time we just had punch cards and the ability to actually push data into a computer that way, then we had discs and CDs and D CVDs, and then the week. But in the mobile era. We all the know about the App Store. You look at the App Store as a distribution model, it's great, it solves a lot of problems, but there's also a lot of different things coming along the line with chat applications, as well. So if you look at Facebook and other platforms they've given you more and more ways to distribute data.
   This is the point, June 29th for me is before that, we had mobile. We had app pages and a bunch of other things. The iPhone came along and it was powered only by mobile. Only by the web at that point, and they introduced a whole bunch of new APIs for you to be able to build these new web-like applications on their platform and we'll talk a bit more about how they changed their mind in a minute.
   But at this point before that, we didn't have the full web, they sold the phone on the idea that you could access the full web, desktop websites, full web on this small mobile phone device. I think that's an incredible thing.
   And I made this graph up, it's not based on any real data at the moment at all.
   [laughter]
   So as I was like, should I quaffate this or not? Yeah, probably need to tell everyone it's a fake graph at this point, but I wanted to get across the point that distribution, the cost of distribution, the difficulty of distribution have been decreasing for a long, long time. We're at a point in the world where distribution has never been easier than it was before, but there are still a problem of problems that needs to be solved still, and if you look at the native space, and this is a quote from gabber, and it's still broadly relevant. He says in a consumer mobile app, you at every step you make a user perform before you they get value out of your app, you will lose 20 percent of your users.
   I like the web, right and I don't like native applications. So I'm a little bit biased in this sense. But when you look at the number of steps that you go through when you want to install something like an airhorn. I've made an airhorn app in a minute which I'll encourage you all together to in a minute. 
   You find it in the store, you click install, you wait for it download, accept any permissions if there is any, then you wait for the download and then you might use it once it's on your home screen and when you look at the numbers if you're losing 20% of your kind of maximum theoretical target set of users when you start from the beginning, well, that's actually pretty bad, right, because you're losing 20%, you end up with less than a third of your overall users at the end, and again, these aren't actual figures, this is just an extrapolation of the actual steps, but when you think about something like the web, again, you just have a URL, the users goes to it, and then they basically start using the application at that point.
   And the comparison for me is quite stark. We have problems on the web where we can't make our applications installed. The idea is that our web applications and websites they're not like traditional native applications, they don't feel like they're supposed to be native. But the thing is if you want users to use your experience, you give them the URL, you'll still lose some users at your maximum theoretical target but you'll have a lot more users at the end. When you think about it at a graph. I know there's a lot of worst case scenarios, as well, I'm railing on native applications a little bit at the moment, but the thing that I want to question and I question for everyone else, is that native platforms know that there is a distribution problem. If you're the App Store or you're the Android marketplace, Play Store in oh, my God, I don't remember what it's called, you know that this is a problem and you want to optimize this for every single user, right? So the question isn't really what happens when native solves this because if you look at what Android is doing, they're actually trying to solve this right now, and I think this is interesting, because Android Instant Apps are in theory a danger to mobile at the moment. Like I think the web has got tremendous advantage because we have the ability to progressively render the experience.
   But like it's interesting, right, because native applications are trying to take all the best bits for the web and what we're going to try to talk about today is how we're going to take from the web all the best bits from native and probably there's going to be a crossover eventually that everything is going to be accessible by the web. So web development itself might change.
   But this is where it gets, right, if you're a developer and what you choose to deploy on the thing you end up competing on is engagement, right? Once you open the application to doing and performing the task is it's like all user experience at that point, and I'm not going to talk about user experience today because I'm not a user experience person, I'm all about APIs, so I think that's interesting, right, as a potential future for the web, where is the web going? I don't know at the moment. I think there are a lot of potential threats out there.
   But the one thing I do want to talk about briefly is the idea with the web at the moment is in terms of users, right? We all know about kind of the 8-second piece of data, the average website takes at least 8 seconds to load before anything is on the screen, but we know about 40% of users abandon a website if it takes more than 3 seconds to load. We have problems with our kind of ecosystem in the industry where we're kind of happy with a slow experience and I think this is important on mobile and I'm going to talk about India in a minute but I want to concentrate on the US side of things. Where the number of US households that are cellular-only is about 20% of households apparently. 
   But that's double since 2013 and it's going to keep increasing and increasing, more and more people are going to go mobile and you think great, because everyone is going to be on 4G. I'm in the US at the moment. I'm on roaming, it's 2G at moment unfortunately. A lot of people don't have great connections.
   When you think about the bigger picture. The context of the rest of the world, 60% of the world are only on 2G so trying to think about optimizing performance is going to be the next big thing we're going to do. Yes, technology is improving, but even with the kind of predictions they've got now, it's 2020, you're still going to have 20% of people on a 2G. And this is important to me because I've been out to India and Indonesia and I've spoken to a lot of users and developers about what they're going to target and how to build software on the he be request. America and the UK. Everyone has a computer. 
   If you look at the current estimates, I think it's 286 million people in the US have got a mobile connection. India is nearly it's not quite double. It's like 480 million people have mobile connectivity at the moment. China is more combined than anyone else. 750 million people have mobile internet connectivity and I think that's incredible, really. China is -- hm, what do I say about China? It's off in its own little place in the web. 
   In China it's very different to the web than the one we know. But if you go to India their web experience is very much like our experience. But the growth is still there. From 2014 to 2015, there was 100 million people in India alone joined the web, mobile in particular. Because everyone is mobile first, right? People's first computing devices are mobile devices. That's 10 times the growth of China, more than 100 times the potential growth than any other countries that we've got. And the way I look at it is a third of the US have basically just come online in India on their own.
   The size of the UK every single year is coming online in India. And I think that's crazy because they're either going to choose this thing where they want web experiences or and the growth in the industry is absolutely huge.
   There's still huge potentials for growth. Now, the interesting thing about them is when you compare things, like this is the 6P. One of the most popular days last year is the Samsung J1. These kind of types like poor devices to some extent. These constrained devices once you've done your basic install of a couple of applications you can't update them anymore. The device constraints that a lot of people have in the world materially impact the way that they can use native experiences and this is why I think the web is actually good for a lot of team. 
   Because it's not like you go off and download and install stuff, you just kind of passively consume the experience as you go by, and yes, we'll cache data on the user's device but you don't have to worry about these huge downloads.
   There are a lot of other pieces of data that a one-second delay is 11% fewer page views, 16% decrease in customer satisfaction, but we know this, but the thing for me is when you think about the data when you're in the UK for instance, you'll use wifi a lot of times. When you go to India and a lot of other places, people are just on cellular pretty much all the time. And cellular data costs a lot of money, right? When you think about it, like if you do some basic calculations and India's minimum wage varies across the country and the type of job you're on, but roughly 17 hours of minimum work -- I'm sorry minimum wage work will get you 500 megabytes worth of data, and I think that's incredible, because people are buying these devices and they get value out of using the applications and the websites on them, as well. 
   But you think about the size of the web and what we're doing to build sites I think that's interesting because we have at this point one hour's worth of India's minimum wage work is about 15 page loads. 
   That's pretty crazy, right? It's relatively constrained what people can do so I do want to highlight and emphasize the fact that performance is everything, whether you're in the US, whether you're in the UK or whether you're targeting I won't say emerging markets but the next billion users as we tend to call it. It's not just download size. It also covers because the devices can be relatively restrained, user experiences we're not doing a very good job in the web industry as a whole of actually catering to that.
   There's one other area I want to talk about. It's this whole idea about the rise of the meta platforms and what this is, we have iOS, we have Android as the two mobile platforms. Desktop, that's fine. But the web sits across everything, right? The web is across all these different platforms and we can deploy to it and it's great because that means everyone can access that and this is the traditional view that we all have of the meta platforms, the web is the meta platform. But when you look at mobile in particular you start seeing things like messaging applications, Facebook, Line. User time and user attention in in these applications pretty much all the time. And they're all starting to scope out, right they're sitting there, we want to own the content experience. We have all these users, we can do a lot with them. And if you look at just the pure content side, we've got iOS Apple News, I don't think it's particularly successful. But you've got things like Instant Articles, Facebook rushing that. You've got We Chat. And people are building things in there. 
   But the thing that people are doing, I say people, these companies are actually talking about these experiences in these platforms is because performance is the key selling point. Like if it's that 8 second it takes 8 seconds to load the average page on mobile, that's a terrible experience. We can load it in 100 milliseconds. That's what all these platforms are selling. 
   I think it's a little bit more kind of complex than that. I think, you know, if you're -- I mean Google probably do this, as well, but Facebook or any of these other platforms, if you want to keep the person or the user inside your platform, because you already have user's attention, send them out out side this worldwide of the web, of course. You tend to want to see how you can keep the content and those experiences for as long as possible on your platform and when you look at the web we don't have an extra kind of thing that focuses purely on performance. Kind of combat those other platforms.
   Now, I don't want to sound like it's a marketing thing. There is like, kind of -- hm, how to talk about this is an interesting one. Google has made this program called AMP. But the idea is like Twitter use this, as well, but like it's a relatively constrained platform of known performance approximate that solved and got out of the way using custom elements and a whole bunch of other things that will allow you to build a fast experience. 
   The goal of AMP is to build fast experiences. As one option, there's a lot of other kind of options out there but even as a normal developer, you shouldn't have to worry about these technologies, you should just be focusing on the idea of performance, especially in the content space, and now if you look at these other platforms, again, like Facebook, Line, the web is the next one, as well. 
   But they all want to be like the next browsers right? If you think about all these application, they want you in the experience all the time and kind of consuming those services. Now, I think that's interesting, because when you look at the API space that they are using, they're starting to introduce things like messenger bots. 
   I think it's incredibly powerful. But when you look at the way they're building these things, they can't go and deploy brand new applications out you know, via native code they're using all the web technologies around to support their kind of platforms, because on iOS and Android, you can update JavaScript code, dynamically any time you want without having to go through any approvals and reviews. But the interesting thing is because you own the web view, you can start to introduce new APIs that are available to developers. Integrated identity, integrated payments. A lot of things that might not make sense on the web but make a lot of sense to users. They've got a web which is not really a web. I don't know whether that is a good thing or a bad thing, but the point is, the reach in distribution is phenomenal. I can't say the word. It's terrible.
   But that's kind of, I talked about the history and I talked about kind of the current way of the world, I think, at the moment. So what is the future? The whole point of this talk, the future of the mobile web. Well I've come up with a relatively rough idea. I bought an iPad pro-just so I could draw graphics and this is the only graphic that I can actually do. It's terrible, isn't it? Like my friend Paul, he does these beautiful graphics.
   But the idea about the web, right, if you look at the browsers and what they're trying to do, they have a rough like a plan of attack. And like it's in kind of four areas, the first is to try and match native on features, not directly on features, like you don't  -- well, well we're going to have USB on the web, but it's find of on the web following a blind security model. But we want to make sure there is no reason why someone would deploy native over the web because for a long time that's what it was. So we want to make sure that the web platform is capable, we want to focus on performance and increase engagement and I'm going to talk briefly about the progression of web apps.
   But the first thing is this is not anything you can do, really unless you're a browser vender is everyone needs to get their mess together, right? That we've spent a long time building different features and different capabilities and it's fine, you've had web features where. Week web Bluetooth it's in Chrome but you know it's Chrome and you can choose to build on the web or not. But you have to deal with the fact that there's two different version of it. That there's UC version to it, there's lots of different errors between and it's just a massive problem to deploy. And there's lot of browser vend years, like Microsoft and if you speak to Rick -P benders from the Chrome team he's got a predictability plan. The idea is to make it easier for developers to build great websites and applications.
   So browsers are going to be doing this and you're going to see more and more things coming through on the consistency. On the idea of web and native, this is a completely made-up graph again, but the point inwanted to get across is the when the iPhone launched, AppCache, mobile storage, huge things that made sense for the mobile web. There's a lot of vision and forethought that went into making a good web experience. But they kind of realize that people didn't want to deploy web applications. The minute that Apple introduced their platform in the App Store, boom, right, just everything changed completely right? The web did not keep up. You've got more access to APIs, just on the native platforms and it took a long time. I blame Android for a lot of this as well, Android had a really crappy browser for such a long time. We just stagnated nor a long time and it wasn't until the industry as a whole got together and said we need to offer more experiences to users, like what are their problems that they have and we'll cover them in a minute. But there are a lot of APIs that are available on the web, right? 
   When you look at the number of mobile-centric APIs that came around you got things like geolocation, right? It's user permission required. It's a HTTPS only now in Chrome and Firefox at least. You've got things like the camera, right? Where it works across -- hey, again you need a user gesture to access the camera and it falls back to iOS but you can use the native camera at that point, we got things like the microphone, right, you can record audio, again in line because we've got access to the camera and a whole bunch of other things, but again, it's locked behind a whole set of permissions, HTTPS only. But again if you're in iOS, you can still use the native.
   We've got things like battery status. I don't like this. I don't understand. You've got this access to hardware, more information about the device that we never had before.
   We've got permissions so you can offer streamlined experience, you can give the user confidence that they can disable all the permissions that they've granted. If they've given you geolocation for instance, and they don't want to give it to you anymore, they don't have to crawl through all the Chrome permissions. You can understand the network information. Is the user on cellular connection, are they on a wifi connection? You can get the maximum theoretical speed of the connection, as well, and this came from when we were in India and a lot of Indian developers why saying if we can understand the maximal connection speed, we can optimalize the experience.
   And this is incredibly boring, piece, autofill, but by implementing the correct tags and metadata on your input fields, can you vastly improve the performance about your forms. The web is all about forms and everyone hates typing on the keyboard. We can solve that across multiple browsers now just by providing the correct metadata inside the page. But when you think about what you can do to enter data into a form, obviously everyone normally has to sign into a service and log in time and time again, the idea behind the credential management API is you can synchronize the credentials across all the devices they're in so that when they go from machine to machine and come back again, they can press one button, they go oh, that's great, I nope the user is logged in, I'll log them back in.
   And then when you follow back to the credential management side of things. You probably all know about Apple Pay. The fact that you can streamline the payment experience, no one likes entering data into forms and Apple Pay, but there is also an open version of that. Now, the idea behind this is that you can integrate with like platform-specific payment providers, like Android pay, but if you're on Samsung or maybe you could integrate into a Samsung thing. It's down to the operating system to provide that resolution of services, but it can also integrate into your checkout flows, if you've got Stripe, you can add all the data into Stripe just by one tap by the user. And the really interesting thing is you've got all the credit card information. You can provide that with the credential management, which is then synchronized across all the device the. I think that's powerful. I'm sorry because I'm sac talking really fast. Sorry.
   >> The idea of push identifications, it's one of the biggest features people request for while they're building for native, the idea that you can send a notification to a user on an important action on the page even when the browser is closed. Native applications couldn't do this for a long time. We don't get free access to send notifications willy-nilly. They have to accept it and then we can send the permissions.
   We have this idea, oh, God, sorry. Offline support, as well, obviously we've got things like AppCache, ServiceWorker is I am going to talk about ServiceWorker a bit more. It's a major API. You install ability you as a web developer can control how your web application looks and feels when the user chooses to install it on the user's home screen and I think that's incredibly important, right, rather than bookmark, the demo is working, great. It didn't look like it was, working. You can add it to the home screen and it launches. I think that's incredibly powerful when you're thinking about building for the web.
   Now we get into the more experimental place. Like the browser vendors want to make sure that you have access to pretty much everything, you know, the user wants to have access. Again, all gated by, it's not just kind of blind discover all the device the around me and connect them, you have to be specific.
   >> Sphero's BB8 in. Top corner there. Just JavaScript commands being sent over JavaScript to the device. And then the generic sensor API which is not in Chrome yet. But the idea is that you know, you get -- we used to build high-level APIs to get access to all these sensors, but the idea is you get a low-level set of primitives and then you can build high-level abstractions on that, so you don't have to wait for the browser vendors to keep updating their browser, just add new hardware in.
   Now, things like magnetometer and accelerometer, those kind of things. So you can create a compass by combining those. Quite powerful.
   The important thing to say about web USB it's it's not open to every type of device that you want to connect to. The hardware provider has to make the website that can access the device, it's really complex, but the idea is you can't just access everything that you want. If you wanted to have some hardware, you as the hardware developer can control the website. It's relatively complex and they want a lot more feedback on this place. Something that's very close to my hard is native sharing. The idea is that you can be on a web page, share out a native application, it's really hard to do at the moment, especially on other platforms.
   But that's not the only thing, right? What about native application when you do a share action? Like if you're Twitter and you're only on the web, you want your website to be on that list of things that you can share to from native. And it's pretty powerful, right, because you can say, I want to share to a native application, I want my a web application to be shared to another web application, I want it to be in a list of things that web application can share to. I think it can be pretty powerful.
   And there's things like web VR, right? But the idea behind web VR. It's VR on the web, right, but the thing that's interesting to me is this is coming out and being developed to kind of come out when all the other mobile platforms are ready for VR right? It's nearly ready and it's a at that point where, you know, when native gets it, the web gets it at the same time. But the web will be able to do so much more. You go to a website and you can flip on VR mode if the user wants it that way. I don't know how successful it's going to be, because you need a big piece of hardware on your face to sort this out. But that will be interesting.
   But the web has been catching up, right? We've been getting more and more closer to the native experiences, we've technically got a really long way to go, but that's the intent of some of the platform developers. But the question is. That's just a list of APIs, right, and it's not a real strategy? You're right. And also, they don't work for every browser, right? And every browser vendor knows, you get these big features, but you have this idea of predictability making it easier for developers to actually build things that work across platforms very easily. I'm not going to concentrate too much about performance, I'm going to be really fast through it. But the idea of performance. Has everybody heard of Rail? The idea of Rail at least is it's a user-centric model of thinking about performance. You should respond to users in under 100 milliseconds. Idle time is interesting, right, because it's really hard to think about idle time, but a lot of people put in work which takes a long time to do, it takes more than 50 milliseconds and if a user clicks a button and the user interface doesn't respond because it's doing some work, then it feels luggy, so the idea is to make sure you chop your work up into 50 milliseconds chunks.
   And then focus hon a load time of 1 second. It's not really a full load time of 1 second. That's incredibly hard to achieve, but for the idea for the user something is advice I I believe. I'd encourage you to look at Paul's work on progressive rendering.
   Data binding, before anything is visible on the page. And there's nothing wrong with using frameworks it makes everyone deliver more effective software more quickly with less bugs, but you have to think more tacticity about how you deploy your applications at that point. There are a couple of different APIs that have come into the web which are just focused on helping you make more performant applications. Intersection observer. Things like request idle call back. If you want will say hey, we think there's a 50 millisecond break that you can actually start to execute some stuff in and I know a number of bigger companies are starting to use that API at the moment.
   So we've got a whole set of APIs, that's great and we want to focus on performance, but the biggest bit is just providing good user experience to users. And when we asked developers, what do you want. This was in 2013, what do you want to do to build a compelling experience that would mean you don't have to go to native and the order of everything that came back was access and install ability to the home screen, push notifications and good offline support. There are a couple of other things that came off the back.
   But it's actually hard, like, those APIs exist now, and we can tell developers about it but it's really hard to think about how you can package them up into a framework. So we thought of this idea called progressive web applications. The start of it was in June of 2015, Alex Russell and Francis Barryman, they started thinking about how you can deliver these new types of applications with all these new APIs, and the idea was you don't want to install a user button and install it right away. You want the user engaged. So if you use the site and you navigate around the site at some point it's like hey, you probably want this on your home screen, do you want to install it. It doesn't does it straight away. It's only after three visits to the site. So rather than try to get access straight away, the more the user uses the site, the more progressively it would be installed on the device.
   We know the APIs aren't available in all platforms, but they are, you can build great web applications by changing the way you think about changing the experience. But the big question everybody has is what makes a progressive web applications. It's relatively nebulous, right? It's like what is web 2.0 or what is Ajax? Ajax wasn't just about the APIs, it was about the way you thought about building these experiences and he came up with this list and it's really -- I think it's really interesting because it's really boring.
   Progressive web app originates from a secure origin, has to be on HTTPS, loads while offline. Even if it's a basic sorry, you can't access the Guardian.com at the moment. And reference a web app manifest. What should the bookmark be, what should it launch, does it launch full screen and those types of things. It's relatively simple. It's a manifest file.  
   But when you go a little bit further, it's whether it should be across devices, instant, you know, we think we can use ServiceWorker on a bunch of other technologies. First load still might take a little while, but every subsequent load, if you're in control of the network, you can make it instant. It's reliable even in the presence of intermittent data connectivity. If you're browsing through a page, you shouldn't just go, oh, you don't have internet connectivity you can't go to the next page. The idea is whether you want to have it on the home screen or you want push notifications you should be able to do those things.
   There is one core API the idea behind ServiceWorker is it introduces an app-like life cycle to every website, vite? Traditionally web pages, he have they have their own life cycle, they have all the different effects, like DOM content loaded unloaded and a bunch of other things, as well. But the ServiceWorker itself kind of lives outside of the site, but can control everything in the site and it can do a lot of things. It's goal is to be installed and activated but once it's activated its goal is to be asleep and only respond to system-level events. 
   And what type of system-level events are there in there's things like the fetch API. You're in control of the network. Notifications can live on your device for 10, 20 minutes, 2 days, 2 weeks, you don't want your web page open for the entire time. So that's what happened is the notification gets raised and your ServiceWorker goes to sleep and only comes back on when it gets clicked. The idea is active for a bit, then back to idle.
   It's quite simple to implement. I'm really massively generalizing at the moment. You don't need a ServiceWorker to build a web app, but if you do, you can enhance it quite well. Then you register this small file. It starts through its application life cycle. I say it's quite simple. You've got to remember, this is asynchronous, right, as you're using it and kind of navigating through the pages, that's the life cycle. And in other cases I need to make sure I've downloaded all the assets I need and once those assets are downloaded store them in the cache and it's activated and everything comes out and everything is ready. The way I like to think about it, you enter URL, go to the server, render something, sends it back and it renders it inside the page. 
   The ServiceWorker, because it sits in the page, so the request will come through the ServiceWorker. There's a lot of code in this slide, I'm really sorry for it, but the fetch is whenever there's a network request generated from you are your web page, then you decide what to do, go into the cache, push it back in, lots of different things, but the ServiceWorker puts you in control. And you can even do things like analytics, this is our analytics plug-in, where analytics doesn't work offline. You can queue up the results, when you come back online you can send them through Google analytics.
   So you can swap things like network first where you will always again to the network and cache the results as they come in and then if you're offline cache the things from the installed, instead. You can do the incremental cache. You can do steal whilst revalidate. At the same time. I always connect to the network and update the cache and the next time you go to it you've got the revalidated and updated content but because you're in control you can do whatever you want. We have this thing called the application shell. If you've been building native applications it's probably very familiar. Is you have all the content and the assets and the structure separate from the content and you cache it all out. And then you kind of cache separately all the content as the user navigates around the site.
   So I like to think of this as the progressive experience. The biggest thing for me is we want to focus on reliability. The user shouldn't click on it and get a dinosaur, it should click on it and the user gets an experience. Obviously we want to make things fast. You obviously want to focus on the user side performance, as well, and obviously you get things like engagement, as well, if you want it to be on the home screen or you want push notifications, you get that package and as a package, you can start thinking about building these relatively. -- service workers, does that make sense? Anyway, like service workers are to progressive web apps as XNL HTTP was to AJAX. You like things like the app shell, like people are starting to use app shell as a concept because they're thinking about the progressive web app model.
   So that's the future as in kind of the near future and this is my hypothetical one. I've got lots of hypothetical things, right? But I do like to think more about far future things about where the web is going to go and I think what's going to happen in the near future is we're going to start to see web experiences that are on the web, hosted on the web ephemeral as in you can use it, super lightweight experience, but when you stop using it doesn't take up any space on your device.
   The headless web is some of my thinking on this. You have the browser on the device, it's fine and then you have all these connected things around you, where the browser is starting to push out onto, things like watches, for instance, and they there's kind of other, like further kind of held devices, as well, it's a relatively nebulous post, I'll be honest, but I do want to show you some things where I think it will make more sense.
   So this is the first bit where we're starting to take the browser outside of it its local confines. And the theory is you could build a podcast app or whatever it is and it could be hooked up to any kind of functionable reality. In this case, connected to your Android watch. Who has an Android watch? Three people, yes!
   [laughter]
   But it could be connected to all these devices and because you can control it from your watch, like web page is still running on your phone technically it's behind the scenes but you might not have to interact with it. And I think it's going to be more and more of these experiences popping up and appearing. Then we have the physical web where iOT devices, parking meters, they can broadcast a URL, so rather than having to download an application and install it, you just say oh, this is the thing that's in front of me, I'll click and open the web page and I'm start interacting with it. But again this is still inside the browser in theory, but you get to the point of like the system-level discovery services for beacons if you can describe in schema.org or some of the metadata the actions taking place on your page, purchase a movie ticket: Like you can get to the point where it's all powered by the web, the payment is taken by the web, but it's done by this lightweight interaction that's living inside the application.
   This is in New York, they developed a really nice notification demo, it's a little mini application that only lives for the entirety of the time that you interact with the notification. You launch the experience to get notified about some interesting news, you go through and answer these questions, and then at the end it says, do you want tock and visit the page. But by itself it's a really nice lightweight, headless application and when you think about these things on the device, what happens when it's on the server, well, you all probably know Phantom.js. Chrome is now doing, headless chrome, they're starting to build this and this is where it gets interesting, because once you think about the types of things that you can do on the server, you can think about different applications that you can build out as well.
   One of them, something like page speed insights, right, it goes off, downloads a page, and then does deep inspection of all the JavaScript and all the network requests and everything that was generated by the page which you wouldn't get by passing the page through a normal web page passer. We get this bit where the web server goes off, fetches the data, does analytics and analysis on it, and presents that relatively nice report. There's another one that we've worked on, as well, called lighthouse. They're actually working on this project right now and the idea is that you can take things like headless Chrome, integrate it into your continuous integration environment and run any set of tests that you want to run on them and again, because you can run these things on your server, you can do a huge amount of things off the back of that.
   So I do want to say, I know I've talked about the mobile web, it's not just about the mobile. It is a lot about the web as a whole. You're desktop, phones, obviously for mobile, and any other kind of experiences that we're going to get. I do think our platform has become a lot more capable over the recent years and all the other browsers are starting to catch up so we can deliver a level playing field. As a whole ecosystem, we do have to focus on performance, user experience, and making sure if we want the web application is this idea of a progressive web application, so if they want to have these installed. So that's me, I'm done, I'm a little bit over. Thank you very much.
   [applause]
   Is that it? Am I massively over?
    No, you're not massively over. But it's probably best to end now. Thanks. So if you have any questions for Paul, I'm sure he'll be around for a bit, and we can do those in the lobby or whatever and we've got about ten minutes to the next talk, thanks.
